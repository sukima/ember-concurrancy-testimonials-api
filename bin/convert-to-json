#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const MarkdownIt = require('markdown-it');
const frontMatter = require('yaml-front-matter');

const MAX_EXCERPT_WORDS = 25;

function readFile(file) {
  return new Promise((resolve, reject) => {
    fs.readFile(file, (err, content) => {
      if (err) { return reject(err); }
      resolve(content);
    });
  });
}

function writeFile(file, content) {
  return new Promise((resolve, reject) => {
    fs.writeFile(file, content, 'utf-8', err => {
      if (err) { return reject(err); }
      resolve();
    });
  });
}

function excerpt(content) {
  // /\s+/ includes \n which we want to preserve.
  return content.split(/[ \t]+/, MAX_EXCERPT_WORDS).join(' ');
}

function parseResource(resourceName, resourceFile, content) {
  let resourcePath = path.dirname(resourceFile);
  let resource = frontMatter.loadFront(content, 'markdown');
  resource.slug = path.basename(resourceFile, '.md');
  resource['self_url'] = path.join('/', resourcePath, `${resource.slug}.json`);
  resource.rendered = md.render(resource.markdown);
  resource.excerpt = md.render(excerpt(resource.markdown));
  return JSON.stringify({
    [resourceName]: resource
  });
}

let [,, resourceName, jsonFile, mdFile] = process.argv;
let md = new MarkdownIt()
  .use(require('markdown-it-highlightjs'));

readFile(mdFile)
  .then(content => parseResource(resourceName, mdFile, content))
  .then(content => writeFile(jsonFile, content))
  .then(() => process.exit(0))
  .catch(err => {
    console.error(err);
    process.exit(1);
  });
